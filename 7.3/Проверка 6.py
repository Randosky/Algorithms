n, W = map(int, input().split())

menu = []
for i in range(n):
    p, c = map(int, input().split())
    menu.append((p, c, i+1))

best = [[0, 0, []]]

for p, c, i in menu:
    new_best = [ [cost+p, cal+c, items+[i]] for cost, cal, items in best if cost+p<=W ]
    best += new_best
    best.sort(key=lambda x: (-x[1], -len(x[2]), x[2]))

ans_cost, ans_cal, ans_items = best[0]
ans_items = sorted(ans_items)

print(len(ans_items), ans_cal)
print(*ans_items)

# Для решения задачи был применен алгоритм полного перебора со вспомогательной структурой данных - динамическим программированием.
#
# Сначала мы считываем данные входа - количество блюд в меню и бюджет студента, а затем список блюд,
# где каждое блюдо представляется кортежем (цена, калории, номер блюда).
#
# Затем мы создаем список best, в котором каждый элемент - это список, содержащий три элемента: суммарную цену,
# суммарное количество калорий и список номеров блюд, которые выбрали на текущий момент.
#
# Далее для каждого блюда в меню мы создаем новый список new_best, в котором находятся все возможные комбинации блюд,
# содержащие текущее блюдо, с добавленными ценой, калориями и номером выбранного блюда. Мы добавляем все элементы new_best в список best.
#
# Затем мы сортируем список best по убыванию калорий, затем по возрастанию количества выбранных блюд и, наконец,
# по возрастанию номеров выбранных блюд.
#
# В результате первый элемент списка best будет содержать наибольшее количество калорий,
# которое мы можем получить при ограниченном бюджете. Мы выбираем этот элемент, извлекаем из него список выбранных блюд и выводим ответ.
